import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:tmt_project/core/constants/env.dart';
import 'package:geolocator/geolocator.dart';
import 'package:tmt_project/core/widgets/tin/custom_dialog.dart';
import 'package:tmt_project/core/widgets/tin/overlay_loading.dart';
import 'package:url_launcher/url_launcher.dart';

class TheaterProvider extends ChangeNotifier {
  /// l·∫•y d·ªØ li·ªáu t√¨m r·∫°p phim
  List theaterMovies = [];
  bool? isLoading;
  String? error;

  /// l·∫•y d·ªØ li·ªáu cho r·∫°p phim (CGV, Lotte,...)
  List theaterTakeAll = [];
  bool isLoadingTakeAll = false;
  String? errorTakeAll;

  /// l·∫•y d·ªØ li·ªáu cho r·∫°p phim g·∫ßn nh·∫•t
  List theaterNear = [];
  bool isLoadingNear = false;
  String? errorNear;
  double? viDo;
  double? kinhDo;

  dynamic layCacCumRap() async {
    try {
      isLoading = true;
      notifyListeners();
      final response = await http
          .get(Uri.parse("$apiTMT/RapPhim/LayTatCaCumRap"))
          .timeout(const Duration(seconds: 5));
      final layDuLieu = jsonDecode(response.body);
      if (response.statusCode == 200) {
        final data = layDuLieu["data"];
        theaterMovies = data;
      } else {
        error = "Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu";
      }
    } catch (e) {
      error = "L·ªói m·∫°ng !";
    }
    isLoading = false;
    notifyListeners();
  }

  dynamic layTatCaRapPhim(int query) async {
    try {
      isLoadingTakeAll = true;
      final response = await http
          .get(Uri.parse("$apiTMT/RapPhim/LayTatCaRap/$query"))
          .timeout(const Duration(seconds: 5));
      final layDuLieu = jsonDecode(response.body);
      if (response.statusCode == 200) {
        final data = layDuLieu["data"];
        theaterTakeAll = data;
      } else {
        errorTakeAll = "Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu";
      }
    } catch (e) {
      errorTakeAll = "L·ªói m·∫°ng !";
      print(e);
    }
    isLoadingTakeAll = false;
    notifyListeners();
  }

  dynamic getCurrentLocation() async {
    bool serviceEnabled;
    LocationPermission permission;

    // Check GPS
    serviceEnabled = await Geolocator.isLocationServiceEnabled();
    if (!serviceEnabled) {
      errorNear = "Vui l√≤ng b·∫≠t GPS ƒë·ªÉ ti·∫øp t·ª•c";
      notifyListeners();
      return [null, null];
    }

    // Check permission
    permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied) {
      permission = await Geolocator.requestPermission();
      if (permission == LocationPermission.denied) {
        errorNear = "·ª®ng d·ª•ng c·∫ßn quy·ªÅn v·ªã tr√≠ ƒë·ªÉ ho·∫°t ƒë·ªông.";
        notifyListeners();
        return [null, null];
      }
    }

    if (permission == LocationPermission.deniedForever) {
      errorNear = "B·∫°n ƒë√£ t·ª´ ch·ªëi quy·ªÅn vƒ©nh vi·ªÖn. H√£y m·ªü C√†i ƒë·∫∑t ƒë·ªÉ b·∫≠t l·∫°i.";
      notifyListeners();
      return [null, null];
    }

    // B·∫≠t loading
    isLoadingNear = true;
    errorNear = null;
    notifyListeners();

    try {
      // L·∫•y v·ªã tr√≠ v·ªõi timeout
      Position position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
      ).timeout(const Duration(seconds: 5));

      return [position.latitude, position.longitude];
    } catch (e) {
      errorNear = "Kh√¥ng l·∫•y ƒë∆∞·ª£c v·ªã tr√≠ (timeout)";
      isLoadingNear = false;
      notifyListeners();
      return [null, null];
    }
  }

  dynamic layRapGan() async {
    try {
      isLoadingNear = true; // üî• th√™m d√≤ng n√†y ƒë·ªÉ ch·∫Øc ch·∫Øn
      notifyListeners();

      final response = await http
          .post(
            Uri.parse("$apiTMT/RapPhim/LayRapPhimGanNhat"),
            headers: {"Content-Type": "application/json"},
            body: jsonEncode({"vi_do": viDo, "kinh_do": kinhDo}),
          )
          .timeout(const Duration(seconds: 5));

      final layDuLieu = jsonDecode(response.body);

      if (response.statusCode == 200) {
        theaterNear = layDuLieu["data"];
        errorNear = null;
      } else {
        errorNear = "Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu";
      }
    } catch (e) {
      errorNear = "L·ªói m·∫°ng !";
      print(e);
    }

    isLoadingNear = false;
    notifyListeners();
  }

  Future<void> moBanDoChiDuong(
    BuildContext context,
    double rapViDo,
    double rapKinhDo,
  ) async {
    bool serviceEnabled;
    LocationPermission permission;

    // Ki·ªÉm tra GPS b·∫≠t ch∆∞a
    serviceEnabled = await Geolocator.isLocationServiceEnabled();
    if (!serviceEnabled) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text("Vui l√≤ng b·∫≠t GPS ƒë·ªÉ ti·∫øp t·ª•c")));
      return;
    }

    // Ki·ªÉm tra quy·ªÅn
    permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied) {
      permission = await Geolocator.requestPermission();
      if (permission == LocationPermission.denied) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("·ª®ng d·ª•ng c·∫ßn quy·ªÅn v·ªã tr√≠ ƒë·ªÉ ho·∫°t ƒë·ªông.")),
        );
        return;
      }
    }

    if (permission == LocationPermission.deniedForever) {
      // T·ª´ ch·ªëi vƒ©nh vi·ªÖn -> m·ªü c√†i ƒë·∫∑t
      showCustomDialog(
        context,
        title: "C·∫ßn quy·ªÅn v·ªã tr√≠",
        content:
            "B·∫°n ƒë√£ t·ª´ ch·ªëi quy·ªÅn vƒ©nh vi·ªÖn. Vui l√≤ng m·ªü c√†i ƒë·∫∑t ƒë·ªÉ c·∫•p l·∫°i quy·ªÅn.",
        confirmText: "M·ªü C√†i ƒë·∫∑t",
        cancelText: "ƒê√≥ng",
        isCancel: true,
        onConfirm: () {
          Geolocator.openAppSettings();
        },
      );
      return;
    }
    OverlayLoading.show(context);
    // N·∫øu ƒë√£ c√≥ quy·ªÅn th√¨ l·∫•y v·ªã tr√≠ hi·ªán t·∫°i
    Position position = await Geolocator.getCurrentPosition(
      desiredAccuracy: LocationAccuracy.high,
    );

    final double myLat = position.latitude;
    final double myLng = position.longitude;

    // Link Google Maps ch·ªâ ƒë∆∞·ªùng
    final Uri googleMapsUrl = Uri.parse(
      "https://www.google.com/maps/dir/?api=1&origin=$myLat,$myLng&destination=$rapViDo,$rapKinhDo&travelmode=driving",
    );

    await launchUrl(googleMapsUrl, mode: LaunchMode.externalApplication);
    OverlayLoading.hide();
  }
}
